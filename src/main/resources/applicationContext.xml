<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--扫描注解-->
    <context:component-scan base-package="com"/>
    <!-- 导入外部的多个properties文件的列表 -->
    <!--<context:property-placeholder location="classpath:config.properties,config2.properties"/>-->
    <!-- 也可以这样导入多个properties文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config.properties</value>
                <!--<value>classpath:config2.properties</value>-->
            </list>
        </property>
    </bean>

    <!--c3p0连接池常用配置-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--数据库连接驱动-->
        <property name="driverClass" value="${c3p0.driverClass}"/>
        <!--数据库的url-->
        <property name="jdbcUrl" value="${c3p0.jdbcUrl}"/>
        <!--用户名-->
        <property name="user" value="${c3p0.user}"/>
        <!--用户密码-->
        <property name="password" value="${c3p0.password}"/>

        <!--以上为必填配置，以下为可选配置-->

        <!--连接池中保留的最大连接数。默认值: 15 -->
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}"/>
        <!--连接池中保留的最小连接数，默认为：3-->
        <property name="minPoolSize" value="${c3p0.minPoolSize}"/>
        <!--初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
        <property name="initialPoolSize" value="${c3p0.initialPoolSize}"/>

        <!--当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，
        超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
        <property name="checkoutTimeout" value="${c3p0.checkoutTimeout}"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
        <property name="acquireIncrement" value="${c3p0.acquireIncrement}"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->
        <property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>
        <!--重新尝试的时间间隔，默认为：1000毫秒-->
        <property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}"/>

        <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->
        <property name="autoCommitOnClose" value="${c3p0.autoCommitOnClose}"/>

        <!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。
        如果定义了这个参数那么属性preferredTestQuery将被忽略。
        你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null -->
        <property name="automaticTestTable" value="${c3p0.automaticTestTable}"/>
        <property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}"/>
        <!--<property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}"/>-->
        <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，
        但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。
        如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false-->
        <property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"/>
        <!--每120秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"/>
        <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}"/>
        <!--设置c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，
        则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->
        <property name="maxStatements" value="${c3p0.maxStatements}"/>
        <!--maxStatementsPerConnection定义了连接池内单个连接所拥有statements的最大缓存数。默认值: 0 -->
        <property name="maxStatementsPerConnection" value="${c3p0.maxStatementsPerConnection}"/>
        <!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false-->
        <!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时执行。默认: 3-->
        <property name="numHelperThreads" value="${c3p0.numHelperThreads}"/>
    </bean>

    <!--注入hibernate使用的SessionFactory对象-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <!--设置Hibernate方言-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <!--是否自动更新表-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <!--使用mappingResources，指定要加载的配置文件，但是文件多了不方便-->
        <!--<property name="mappingResources">
            <list><value>xxx.hbm.xml</value></list>
        </property>-->
        <!--直接指定一个配置文件所在的目录，方便了许多-->
        <!--<property name="mappingDirectoryLocations">
            <list><value>mapping</value></list>
        </property>-->
        <!--如果用了注解，可以使用packagesToScan、annotatedPackages、annotatedClasses来设置-->
        <property name="packagesToScan">
            <list>
                <value>com</value>
            </list>
        </property>
    </bean>

    <!-- 配置Spring的声明式事务管理（采用注解的方式） -->
    <bean id="transactionManager" lazy-init="false"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <!--引入数据源依赖 -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!--使用事务注解时加上下面两句-->
    <context:annotation-config/>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 定义事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 定义事务切面，并应用事务通知 -->
    <aop:config>
        <aop:pointcut id="xxxBizImpl" expression="execution(* com.cdzg.spring.biz.*.*(..))"/>
        <aop:advisor pointcut-ref="xxxBizImpl" advice-ref="txAdvice"/>
    </aop:config>
</beans>