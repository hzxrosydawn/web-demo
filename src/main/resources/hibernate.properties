# ===============================================================================================
# hibernate 基本属性
# ===============================================================================================
# 设置所用数据库连接的驱动器类
hibernate.connection.driver_class=com.mysql.jdbc.Driver
# 设置所用数据库方言。Hibernate根据数据库方言来识别数据库之间的差异
hibernate.dialect==org.hibernate.dialect.MySQLDialect
# 设置所用数据库连接的url
hibernate.connection.url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF8
# 设置所用数据库的用户名
hibernate.connection.username=rosydawn
# 设置所用数据库的密码
hibernate.connection.password=database_password
# 输出所有SQL语句到控制台，取值true或false
hibernate.show_sql=true
# 在log和console中打印出格式化的SQL，取值true或false
hibernate.format_sql=true
# 是否Hibernate生成的SQL中添加有助于调试的注释信息，默认值为false，取值true或false
hibernate.use_sql_comments=true
# 设置是否自动提交。通常不建议打开自动提交
#hibernate.connection.autocommit=true
# 在SessionFactory创建时，自动检查数据库结构，或者将数据库schema的DDL导出到数据库
# 取值validate|update|create|create-drop：
# create：每次加载hibernate时都会删除上一次的生成的临时表，然后根据model类再重新来生成新的临时表，
#       哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因；
# create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除；
# update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），
#       以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。
#       要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要 应用第一次运行起来后才会；
# validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
hibernate.hbm2ddl.auto=update
# 为单向关联(一对一, 多对一)的外连接抓取树（the outer join fetch tree）设置最大深度
# 值为0意味着将关闭默认的外连接抓取，建议在0到3之间取值
hibernate.max_fetch_depth=1
# 为批量抓取设置默认的批量大小，建议的取值为4, 8和16
hibernate.default_batch_fetch_size=8


# ===============================================================================================
# C3P0连接池相关配置
# ===============================================================================================
# 指定连接池里最大连接数
hibernate.c3p0.max_size=2
# 指定连接池里最小连接数
hibernate.c3p0.min_size=2
# 指定连接池里连接的超时时长
hibernate.c3p0.timeout=5000
# 指定连接池里最大缓存Statement对象的数量
hibernate.c3p0.max_statements=100
# 指定连接池里空闲连接的检查时间间隔
hibernate.c3p0.idle_test_period=3000
#　指定连接池里连接耗尽的时候一次同时获取的连接数
hibernate.c3p0.acquire_increment=2
# 每次都验证连接是否可用，为了性能可以设置为false
hibernate.c3p0.validate=false


# ===============================================================================================
# JNDI连接属性。如果无须Hibernate自己管理数据源，而是直接访问容器管理数据源，Hibernate可使用JNDI (Java
# Naming Directory Interface，即Java命名目接口)数据源的相关配置
# ===============================================================================================
# 指定数据源JNDI名字
#hibernate.connection.datasource
# 指定JNDI提供者的URL，该属性是可选的
# 如果JNDI与Hibernate持久化访问的代码处于同个应用中，则无须指定该属性
#hibernate.jndi.ur
# 指定JNDI InitialContextFactory的实现类，该属性也是可选的
# 如果JNDI与Hibernate持久化访间的代码处于同个应用中，则无须指定该属性
#hibernate.jndi.class
#指定连接数据库的用户名，该属性是可选的
#hiberate.connection.username
#指定连按数据库的密码，该属性是可选的
#hibernate.connection.password
#即使使用JNDI数据源，一样需要指定连接数据库的方言。虽然设置数据库方言并不是必需的，但对于优化持久层访问很有必要


# ===============================================================================================
# Hibernate其他属性
# ===============================================================================================
# 为"当前" Session指定一个(自定义的)策略。取值jta|thread|custom.Class
#hibernate.current_session_context_class
# 选择HQL解析器的实现
# 取值org.hibernate.hql.ast.ASTQueryTranslatorFactory
# 或者org.hibernate.hql.classic.ClassicQueryTranslatorFactory
#hibernate.query.factory_class org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory
# 将Hibernate查询中的符号映射到SQL查询中的符号 (符号可能是函数名或常量名字)
# 取值hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC
#hibernate.query.substitutions
# 开启CGLIB来替代运行时反射机制(系统级属性)。反射机制有时在除错时比较有用。
# 注意即使关闭这个优化, Hibernate还是需要CGLIB。你不能在hibernate.cfg.xml中设置此属性，取值true|false
#hibernate.cglib.use_reflection_optimizer=true
# 强制Hibernate按照被更新数据的主键，为SQL更新排序。这么做将减少在高并发系统中事务的死锁，取值true|false
#hibernate.order_updates=true
# 设置是否将被删除对象的生成标识重设为默认值，取值true|false
#hibernate.use_identifier_rollback=true
## 设置是否开启字节码反射优化器，默认值为false，取值true|false
#hibernate.bytecode.use_reflection_optimizer=true
# 设置是否收集有助于性能调节的统计数据，取值true或false
#hibernate.generate_statistics=true
# 为由这个SessionFactory打开的所有Session指定默认的实体表现模式. 取值dynamic-map, dom4j, pojo
#hibernate.default_entity_mode
# 在生成的SQL中, 为非全限定名的表名默认的schema，取值SCHEMA_NAME
#hibernate.default_schema=test
# 在生成的SQL中, 将给定的catalog附加于非全限定名的表名上，取值CATALOG_NAME
#hibernate.default_catalog=test
# SessionFactory创建后，将自动使用这个名字绑定到JNDI中，取值jndi/composite/name
#hibernate.session_factory_name=


# ===============================================================================================
# Hibernate JDBC和连接(connection)属性，，使用JDBC连接时启用
# ===============================================================================================
# 指定JDBC抓取数量的大小，它可以接受一个整数值，实质上是调用Statement.setFetchSize()方法
#hibernate.jdbc.fetch_size=25
# 非零值允许Hibernate使用JDBC2的批量更新，0值表示不开启批处理。建议取5到30之间的值
#hibernate.jdbc.batch_size=5
# 如果想让JDBC驱动从executeBatch()返回正确的行计数，那么将此属性设为true(开启这个选项通常是安全的)
# 同时，Hibernate将为自动版本化的数据使用批量DML. 默认值为false，取值true|false
#hibernate.jdbc.batch_versioned_data=true
# 选择一个自定义的JDBC Batcher。多数应用程序不需要这个配置属性
#hibernate.jdbc.factory_class
# 允许Hibernate使用JDBC2的可滚动结果集。只有在使用用户提供的JDBC连接时，
#这个选项才是必要的, 否则Hibernate会使用连接的元数据，取值true|false
#hibernate.jdbc.use_scrollable_resultset
# 在JDBC读写binary (二进制)或serializable (可序列化) 的类型时使用流(stream)(系统级属性). 取值true|false
#hibernate.jdbc.use_streams_for_binary
# 在数据插入数据库之后，允许使用JDBC3 PreparedStatement.getGeneratedKeys() 来获取数据库生成的key
# 需要JDBC3+驱动和JRE1.4+，如果你的数据库驱动在使用Hibernate的标 识生成器时遇到问题，请将此值设为false
# 默认情况下将使用连接的元数据来判定驱动的能力. 取值true|false
#hibernate.jdbc.use_get_generated_keys
## 选择一个自定义的SQL异常转换器
#hibernate.jdbc.sql_exception_converter
# 自定义ConnectionProvider的类名, 此类用来向Hibernate提供JDBC连接
# 取值classname.of.ConnectionProvider
#hibernate.connection.provider_class
# 设置JDBC事务隔离级别（isolation level）。查看java.sql.Connection来了解各个值的具体意义
# 但请注意多数数据库都不支持所有的隔离级别。取值 1,2,4,8
#hibernate.connection.isolation=4
# 指定Hibernate在何时释放JDBC连接。默认情况下,直到Session被显式关闭或被断开连接时,才会释放JDBC连接。
# 对于应用程序服务器的JTA数据源,你应当使用after_statement, 这样在每次JDBC调用后，都会主动的释放连接。
# 对于非JTA的连接, 使用after_transaction在每个事务结束时释放连接是合理的
# auto将为JTA和CMT事务策略选择after_statement, 为JDBC事务策略选择after_transaction。
# 取值on_close|after_transaction|after_statement|auto
#hibernate.connection.release_mode
# 将JDBC属性propertyName传递到DriverManager.getConnection()中去
#hibernate.connection
# 将属性propertyName传递到JNDI InitialContextFactory中去
#hibernate.jndi


# ===============================================================================================
# Hibernate二级缓存属性，可以提供Hibernate持久化访问的性能
# ===============================================================================================
# 用于设置二级缓存CacheProvider的类名
hibernate.cache.provider_class
# 以频繁的读操作为代价, 优化二级缓存以实现最小化写操作。
# 在Hibernate3中，这个设置对的集群缓存非常有用，对集群缓存的实现而言，默认是开启的
# 取值true|false
hibernate.cache.use_minimal_puts=true
# 是否允许查询缓存，个别查询仍然需要被设置为可缓存的
# 取值true|false
hibernate.cache.use_query_cache=true
# 是否使用二级缓存。可以用来完全禁用二级缓存
# 对那些在类的映射文件中指定了<cache>的持久化类，会默认开启二级缓存
# 取值true|false
hibernate.cache.use_second_level_cache=false
# 设置查询缓存工厂的类名（实现了QueryCache接口），默认为内建的StandardQueryCache
hibernate.cache.query_cache_factory=org.hibernate.cache.internal.StandardQueryCache
# 二级缓存区域名（cache region name）的前缀
# 取值prefix
hibernate.cache.region_prefix=hibernate.test
# 是否强制Hibernate以可读性更好的格式将数据存入二级缓存
# 取值true|false
hibernate.cache.use_structured_entries=true


# ===============================================================================================
# Hibernate事务属性
# ===============================================================================================
# 指定Hibernate事务工厂的类型，该属性必须是TransactionFactory类的直接或间接子类
# 可以指定为org.hibernate.transaction.JDBCTransactionFactory（默认）
# 也可指定为为org.hibernate.transaction.JTATransactionFactory
#hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory
# 指定一个JNDI名字，用来被JTATransactionFactory从应用服务器获取JTA UserTransaction
# 如果指定了hibernate.transaction.manager_lookup_class就不用使用该设置
# 默认值为UserTransaction
#jta.UserTransaction jta/usertransaction
#jta.UserTransaction javax.transaction.UserTransaction
#jta.UserTransaction=UserTransaction
# 设置一个TransactionManagerLookup类名
# 当使用JVM级缓存，或在JTA环境中使用hilo生成策略时需要该类
#hibernate.transaction.manager_lookup_class=org.hibernate.transaction.JBossTransactionManagerLookup
#hibernate.transaction.manager_lookup_class=org.hibernate.transaction.WeblogicTransactionManagerLookup
#hibernate.transaction.manager_lookup_class=org.hibernate.transaction.WebSphereTransactionManagerLookup
#hibernate.transaction.manager_lookup_class=org.hibernate.transaction.OrionTransactionManagerLookup
#hibernate.transaction.manager_lookup_class=org.hibernate.transaction.ResinTransactionManagerLookup
# 指定Session是否在事务完成后自动将数据刷新（flush）到底层数据库
# 现在更好的方法是使用自动session上下文管理
# 取值true|false
#hibernate.transaction.flush_before_completion=true
# 指定是否在唉事务结束后自动关闭session
# 现在更好的方法是使用自动session上下文管理
# 取值true|false
#hibernate.transaction.auto_close_session=false